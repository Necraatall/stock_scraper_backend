# kubernetes-resources.yaml
# Secrets
---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
data:
  POSTGRES_DB: c3RvY2tfZGI=
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_PASSWORD: cm9vdA==


# PersistentVolumeClaim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# Deployments and Services
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      automountServiceAccountToken: false
      containers:
      - name: db
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        resources:
          limits:
            memory: "512Mi"
            ephemeral-storage: "1Gi"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc

# Swagger Deployment Configuration
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: swagger
  labels:
    app: swagger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: swagger
  template:
    metadata:
      labels:
        app: swagger
    spec:
      automountServiceAccountToken: false
      containers:
      - name: swagger
        image: necraatall/stock-scraper:latest
        ports:
        - containerPort: 8000
        command:
        - sh
        - -c
        - ./wait-for-it.sh db-service:5432 -- poetry run alembic upgrade head && uvicorn src.main:app --host 0.0.0.0 --port 8000
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
        volumeMounts:
        - name: app-volume
          mountPath: /app
        - name: postman-collections
          mountPath: /kubernetes/postman_call
      volumes:
      - name: app-volume
        hostPath:
          path: /home/milan/Programy/Python/DevOps/lection2
      - name: postman-collections
        hostPath:
          path: /home/milan/Programy/Python/DevOps/lection2/kubernetes/postman_call


# DB Service Configuration
---
apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    app: db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5450

# Swagger Service Configuration
---
apiVersion: v1
kind: Service
metadata:
  name: swagger-service
  namespace: default
spec:
  selector:
    app: swagger
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8100
  type: LoadBalancer

# CronJob
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postman-cronjob
spec:
  schedule: "0 19 * * *" # runs every day at 19:00
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postman-tests
            image: necraatall/postman-tests:latest
            command: ["newman", "run", "/etc/newman/postman_test.json"]
            volumeMounts:
            - name: postman-config-volume
              mountPath: /etc/newman
          volumes:
          - name: postman-config-volume
            configMap:
              name: postman-config

# ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postman-config
data:
  postman_test.json: |
    {
      "info": {
        "_postman_id": "9f1d9a0a-38e2-4a90-a002-a643c4a692c2",
        "name": "REST API basics: CRUD, test & variable",
        "description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
        "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
        "_exporter_id": "36795096"
      },
      "item": [
        {
          "name": "Test Scrape Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": "http://swagger-service.default.svc.cluster.local:8001/scrape",
            "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ],
      "variable": [
        {
          "key": "id",
          "value": "1"
        },
        {
          "key": "base_url",
          "value": "https://postman-rest-api-learner.glitch.me/"
        }
      ]
    }
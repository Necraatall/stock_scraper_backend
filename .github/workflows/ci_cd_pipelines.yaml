# .github/workflows/ci_cd_pipeline.yaml
name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - 'feature/**'
      - 'bug/**'
      - 'chore/**'
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
      version:
        description: 'Version to deploy'
        required: true
        default: '1.0.0'

jobs:
  setup:
    name: AWS Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
          aws-region: us-east-1

  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  ruff-scan:
    name: Run Ruff
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Ruff
        uses: chartboost/ruff-action@v1
        with:
          args: check ./ --fix

  # TODO: revision of db, models, migrate,
  # scraper on docker-compose, redis - need create,
  
  # NOT important for the DevOps course
  # will manage it after done graduation tasks
  # test-and-coverage:
  #   name: Run Tests and Check Coverage
  #   runs-on: ubuntu-latest
  #   needs: ruff-scan
  #   env:
  #     TESTING: true
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Log in to Amazon ECR Public
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
  #       run: |
  #         aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

  #     - name: Pull Docker image
  #       run: |
  #         docker pull public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest

  #     - name: Run tests and check coverage
  #       env:
  #         TEST_DATABASE_URL: 'sqlite:///./app/tests/test_db/test.db'
  #       run: |
  #         docker run --rm \
  #           -e TESTING=true \
  #           -e TEST_DATABASE_URL=$TEST_DATABASE_URL \
  #           public.ecr.aws/d8o8x6c7/stock_scraper_backend:latest bash -c "poetry run coverage run -m pytest && poetry run coverage report && poetry run coverage html && poetry run coverage-badge -o coverage.svg -f"
      
  #     - name: Upload coverage badge
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-badge
  #         path: coverage.svg

  #     - name: Upload HTML coverage report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: html-coverage-report
  #         path: htmlcov

  # TODO: make it for all README.md
  # make github token and place him on the github secrets
  # update-readme:
  #   runs-on: ubuntu-latest
  #   needs: ruff-scan
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'

  #     - name: Install tree
  #       run: sudo apt-get install -y tree

  #     - name: Set executable permissions for update_readme_tree.sh
  #       run: chmod +x ./update_readme_tree.sh

  #     - name: Update README.md with directory tree
  #       run: ./update_readme_tree.sh

  #     - name: Get current branch name
  #       id: vars
  #       run: echo "actual_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

  #     - name: Set git user info
  #       run: |
  #         git config --local user.email "${{ secrets.GIT_USER_EMAIL || 'actions@github.com' }}"
  #         git config --local user.name "${{ secrets.GIT_USER_NAME || 'GitHub Actions' }}"

  #     - name: Commit changes
  #       run: |
  #         git add README.md
  #         git commit -m "Update project README.md with latest directory tree"
  #         git push --force origin HEAD:${{ env.actual_branch }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Display README.md contents
  #       run: cat README.md

  kubernetes-deploy:
    name: Deploy to Kubernetes and test with Postman
    runs-on: ubuntu-latest
    needs: ruff-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name stock-scraper-eks-cluster --region us-east-1
        
      - name: Deploy Postman Deployment
        run: |
          kubectl apply -f ./kubernetes/postman-deployment.yaml

      - name: Deploy Postman CronJob
        run: |
          kubectl apply -f ./kubernetes/postman-cronjob.yaml

  docker-build-and-push:
    name: Docker Build and Push to AWS ECR Public and GHCR
    runs-on: ubuntu-latest
    needs: ruff-scan
    outputs:
      new_version: ${{ steps.set-output.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest version tag
        id: get-tag
        run: |
          if git describe --tags `git rev-list --tags --max-count=1` &>/dev/null; then
            latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          else
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Increment version
        id: set-output
        run: |
          latest_tag=${{ steps.get-tag.outputs.latest_tag }}
          version_without_v="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$version_without_v"
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Log in to Amazon ECR Public
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_TECHNICAL_USER }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_TECHNICAL_USER }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build Docker image
        env:
          ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/stock_scraper_backend"
          IMAGE_TAG: ${{ steps.set-output.outputs.new_version }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t ghcr.io/$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')/stock_scraper_backend:$IMAGE_TAG .

      - name: Push Docker image to Amazon ECR Public
        env:
          ECR_REPOSITORY: "public.ecr.aws/d8o8x6c7/stock_scraper_backend"
          IMAGE_TAG: ${{ steps.set-output.outputs.new_version }}
        run: |
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Docker login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Push Docker image to GHCR
        env:
          IMAGE_TAG: ${{ steps.set-output.outputs.new_version }}
        run: |
          docker push ghcr.io/$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')/stock_scraper_backend:$IMAGE_TAG

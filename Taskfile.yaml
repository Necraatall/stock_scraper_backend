# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev
version: "3.8"

env:
  USER_FILE: ".current_user"

tasks:
  load-env:
    cmds:
      - source .env

  get-user:
    cmds:
      - whoami > {{.USER_FILE}}

  setup:
    summary: Sets up Taskfile auto-completion
    deps:
      - get-user
    desc: |
      This task performs the following steps to set up auto-completion for Taskfile:
      1. Downloads the bash auto-completion script for Taskfile.
      2. Moves the script to the user's local bash-completion directory.
      3. Adds a line to the .bashrc file to source the auto-completion script on shell startup.
    cmds:
      - mkdir -p ~/.local/share/bash-completion/completions
      - curl -LO https://raw.githubusercontent.com/go-task/task/main/completion/bash/task.bash || { echo "Failed to download task.bash"; exit 1; }
      - mv task.bash ~/.local/share/bash-completion/completions/ || { echo "Failed to move task.bash"; exit 1; }
      - grep -qxF 'source ~/.local/share/bash-completion/completions/task.bash' ~/.bashrc || echo 'source ~/.local/share/bash-completion/completions/task.bash' >> ~/.bashrc

  install-pip:
    summary: Ensures pip is installed and updated in the virtual environment
    cmds:
      - python -m ensurepip --upgrade
      - pip install --upgrade pip

  install-poetry:
    summary: Installs Poetry package manager
    deps:
      - setup
      - install-pip
    desc: |
      Installs the latest version of Poetry package manager if not already installed and ensures it is in PATH.
    env:
      PYTHONPATH: ".:src:./.venv/lib/python3.12/site-packages:$PYTHONPATH"
    cmds:
      - |
        export PATH="$HOME/.local/bin:$PATH" && \
        pip install six && \
        if ! command -v poetry >/dev/null; then \
          curl -sSL https://install.python-poetry.org | python3 -; \
        fi && \
        poetry --version

  install-dependencies:
    summary: Installs project dependencies
    env:
      PATH: "/root/.local/bin:$PATH"
    deps:
      - install-poetry
    cmds:
      - if [ -d ".venv" ]; then rm -rf .venv; fi  # Odstranění starého prostředí
      - export POETRY_VERSION=$(curl -sSL https://api.github.com/repos/python-poetry/poetry/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/') && echo "Using Poetry version $POETRY_VERSION"
      - poetry env use python3.12                 # Vytvoření nového prostředí
      - poetry lock                               # Zamknutí závislostí
      - poetry install --with dev                 # Instalace včetně dev balíčků
      - poetry update                             # Aktualizace závislostí

  local-install-trivy:
    summary: Installs Trivy vulnerability scanner
    desc: |
      This task installs the Trivy vulnerability scanner by performing the following steps:
      1. Updates the list of available packages.
      2. Installs necessary packages (wget, apt-transport-https, gnupg).
      3. Downloads and stores the public key for the Trivy repository.
      4. Adds the Trivy repository to the APT sources list with proper permissions.
      5. Updates the list of available packages again to include the new repository.
      6. Installs Trivy using the official installation script.
      7. Adds Trivy to the system PATH.
      8. Verifies the installation by checking the Trivy version.
    cmds:
      - sudo apt-get update -y
      - sudo apt-get install -y wget apt-transport-https gnupg
      - sudo wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
      - sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" > /etc/apt/sources.list.d/trivy.list'
      - sudo apt-get update -y
      - sudo curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh
      - echo 'export PATH=$PATH:/root/.local/bin' >> ~/.bashrc
      - trivy --version

  local-trivy-scan:
    summary: Scans a Docker image using Trivy
    deps:
      - load-env
    desc: |
      This task performs the following steps to scan a Docker image using Trivy:
      1. Runs Trivy against the specified Docker image.
    cmds:
      - trivy image --severity HIGH,CRITICAL --ignore-unfixed ${DOCKER_IMAGE_NAME}

  local-install-ruff:
    summary: Installs Ruff linter
    desc: |
      This task installs the Ruff linter by performing the following steps:
      1. Installs Ruff using pip.
    cmds:
      - pip install ruff

  local-ruff-scan:
    summary: Runs Ruff linter
    desc: |
      This task performs the following steps to run Ruff linter:
      1. Installs Ruff if not already installed.
      2. Runs Ruff against the codebase.
    cmds:
      - ruff check ./src

  local-pytest-scan:
    summary: Runs pytest
    desc: |
      This task performs the following steps to run pytest:
      1. Runs pytest against the tests.
    cmds:
      - poetry run pytest --cov=src --cov-report=term-missing
      - poetry run coverage html

  # this is setup for newones on python
  install-docker:
    summary: Installs Docker and Docker Compose
    desc: |
      This task checks if Docker and Docker Compose are installed.
      If not, it installs them.
    cmds:
      - |
        if ! command -v docker >/dev/null 2>&1 || ! command -v docker-compose >/dev/null 2>&1; then
          echo "Docker or Docker Compose not found. Installing..."
          sudo apt update
          sudo apt install -y docker.io docker-compose
        else
          echo "Docker and Docker Compose are already installed."
        fi

  start-docker:
    summary: Starts Docker containers
    desc: |
      This task performs the following steps to start Docker containers:
      1. Uses Docker Compose to start the containers defined in docker-compose.yml.
    cmds:
      - docker-compose up -d

  setup-install:
    desc: "Setup the project"
    deps:
      - install-docker
      - install-dependencies
      - start-docker

# alternative step for setup-install for newbies
  initialize-database:
    summary: Initializes the database using Alembic
    desc: |
      This task performs the following steps to initialize the database:
      1. Applies the latest database migrations using Alembic.
    cmds:
      - alembic upgrade head
